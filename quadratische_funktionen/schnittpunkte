<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aufgabengenerator: Schnittpunkte von Geraden und Parabeln</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
        }
        
        .container {
            background-color: #f9f9f9;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        .task-container {
            margin-bottom: 25px;
            padding: 15px;
            background-color: #fff;
            border-radius: 6px;
            border-left: 4px solid #4285F4;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        input[type="text"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 1rem;
        }
        
        button {
            background-color: #4285F4;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 8px;
            transition: background-color 0.3s;
            font-size: 1rem;
        }
        
        button:hover {
            background-color: #3367D6;
        }
        
        button.secondary {
            background-color: #34A853;
        }
        
        button.secondary:hover {
            background-color: #2E8B57;
        }
        
        .result {
            margin-top: 15px;
            padding: 15px;
            border-radius: 4px;
            display: none;
        }
        
        .correct {
            background-color: #E6F4EA;
            color: #137333;
            border-left: 4px solid #34A853;
        }
        
        .incorrect {
            background-color: #FCE8E6;
            color: #C5221F;
            border-left: 4px solid #EA4335;
        }
        
        .solution {
            background-color: #E8F0FE;
            padding: 15px;
            border-radius: 4px;
            border-left: 4px solid #4285F4;
            margin-top: 15px;
            display: none;
        }
        
        .formula {
            font-family: "Times New Roman", Times, serif;
            font-style: italic;
            font-size: 1.1em;
        }
        
        .hidden {
            display: none;
        }
        
        .task-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .difficulty-selector {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .difficulty-btn {
            background-color: #e0e0e0;
            color: #333;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .difficulty-btn.active {
            background-color: #4285F4;
            color: white;
        }
        
        .tasktype-selector {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .tasktype-btn {
            background-color: #e0e0e0;
            color: #333;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            flex-grow: 1;
            text-align: center;
        }
        
        .tasktype-btn.active {
            background-color: #34A853;
            color: white;
        }
        
        .equation-display {
            font-family: "Times New Roman", Times, serif;
            font-size: 1.2em;
            margin: 10px 0;
        }
        
        .gerade {
            color: #4285F4;
        }
        
        .parabel {
            color: #EA4335;
        }
        
        /* Graph Visualization */
        .graph-container {
            width: 100%;
            max-width: 500px;
            height: 400px;
            margin: 20px auto;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        #graph {
            width: 100%;
            height: 100%;
        }
        
        .step {
            margin-bottom: 15px;
            padding-left: 10px;
            border-left: 2px solid #ccc;
        }
        
        .step-number {
            font-weight: bold;
            margin-right: 5px;
        }
        
        .info-box {
            background-color: #FFF9C4;
            padding: 10px;
            border-radius: 4px;
            margin: 15px 0;
        }
        
        sup {
            vertical-align: super;
            font-size: smaller;
        }
        
        /* Tab-System für Formeln */
        .tabs {
            display: flex;
            margin-bottom: 15px;
            border-bottom: 1px solid #ddd;
        }
        
        .tab {
            padding: 10px 15px;
            background-color: #f1f1f1;
            cursor: pointer;
            border-top-left-radius: 4px;
            border-top-right-radius: 4px;
            margin-right: 2px;
        }
        
        .tab.active {
            background-color: #4285F4;
            color: white;
            border: 1px solid #3367D6;
            border-bottom: none;
        }
        
        .tab-content {
            display: none;
            padding: 15px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-top: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .coordinate {
            font-family: monospace;
            background-color: #f5f5f5;
            padding: 2px 4px;
            border-radius: 2px;
            border: 1px solid #ddd;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Aufgabengenerator: Schnittpunkte von Funktionen</h1>
        
        <div class="tabs">
            <div class="tab active" data-tab="formulas">Formeln</div>
            <div class="tab" data-tab="info">Hinweise</div>
        </div>
        
        <div class="tab-content active" id="formulas">
            <h3>Verwendete Gleichungen:</h3>
            <div class="equation-display">
                <strong class="gerade">Gerade:</strong> y = m·x + t
            </div>
            <div class="equation-display">
                <strong class="parabel">Parabel:</strong> y = a·x<sup>2</sup> + b·x + c
            </div>
            
            <div class="info-box">
                <strong>Allgemeine Lösungswege:</strong>
                <p><strong>Gerade und Parabel:</strong> Gleichsetzen und quadratische Gleichung lösen</p>
                <p><strong>Zwei Parabeln:</strong> Gleichsetzen und auf Normalform bringen</p>
            </div>
        </div>
        
        <div class="tab-content" id="info">
            <h3>Lösungsstrategien:</h3>
            <p><strong>Gerade und Parabel:</strong></p>
            <ol>
                <li>Gleichsetzen: m·x + t = a·x<sup>2</sup> + b·x + c</li>
                <li>Umformen zu: a·x<sup>2</sup> + (b-m)·x + (c-t) = 0</li>
                <li>Lösen mit Mitternachtsformel: x = (-b ± √(b<sup>2</sup> - 4ac)) / 2a</li>
            </ol>
            
            <p><strong>Zwei Parabeln:</strong></p>
            <ol>
                <li>Gleichsetzen: a₁·x<sup>2</sup> + b₁·x + c₁ = a₂·x<sup>2</sup> + b₂·x + c₂</li>
                <li>Umformen zu: (a₁-a₂)·x<sup>2</sup> + (b₁-b₂)·x + (c₁-c₂) = 0</li>
                <li>Koeffizienten als a' = a₁-a₂, b' = b₁-b₂, c' = c₁-c₂ definieren</li>
                <li>Lösen mit Mitternachtsformel (wenn a' ≠ 0)</li>
                <li>Falls a' = 0, aber b' ≠ 0, dann lineare Gleichung lösen</li>
                <li>Falls a' = 0 und b' = 0, dann entweder keine oder unendlich viele Schnittpunkte</li>
            </ol>
        </div>
        
        <div class="tasktype-selector">
            <span>Aufgabentyp:</span>
            <button class="tasktype-btn active" data-type="line-parabola">Gerade mit Parabel</button>
            <button class="tasktype-btn" data-type="parabola-parabola">Parabel mit Parabel</button>
        </div>
        
        <div class="difficulty-selector">
            <span>Schwierigkeitsgrad:</span>
            <button class="difficulty-btn active" data-difficulty="leicht">Leicht</button>
            <button class="difficulty-btn" data-difficulty="mittel">Mittel</button>
            <button class="difficulty-btn" data-difficulty="schwer">Schwer</button>
        </div>
        
        <div class="task-controls">
            <button id="newTaskBtn">Neue Aufgabe</button>
            <button id="showSolutionBtn" class="secondary">Lösung anzeigen</button>
            <button id="showGraphBtn">Graph anzeigen</button>
        </div>
        
        <div class="task-container">
            <h3>Aufgabe</h3>
            <p id="taskText"></p>
            <div class="equation-display" id="equation1"></div>
            <div class="equation-display" id="equation2"></div>
        </div>
        
        <div class="form-group">
            <label for="userAnswer">Deine Lösung (Schnittpunkte):</label>
            <input type="text" id="userAnswer" placeholder="Format für einen Punkt: (x|y) oder mehrere Punkte: (x₁|y₁), (x₂|y₂)">
        </div>
        
        <button id="checkAnswerBtn">Antwort überprüfen</button>
        
        <div id="resultMessage" class="result"></div>
        <div id="solution" class="solution"></div>
        
        <div class="graph-container hidden" id="graphContainer">
            <div id="graph"></div>
        </div>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/10.0.0/math.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/plotly.js/2.24.3/plotly.min.js"></script>
    
    <script>
        // Globale Variablen
        let currentTask = {};
        let currentDifficulty = "leicht";
        let currentTaskType = "line-parabola";
        let graphVisible = false;
        
        // Initialisierung
        document.addEventListener("DOMContentLoaded", function() {
            // Event-Listener
            document.getElementById("newTaskBtn").addEventListener("click", generateNewTask);
            document.getElementById("checkAnswerBtn").addEventListener("click", checkAnswer);
            document.getElementById("showSolutionBtn").addEventListener("click", showSolution);
            document.getElementById("showGraphBtn").addEventListener("click", toggleGraph);
            
            // Tab-System
            document.querySelectorAll(".tab").forEach(tab => {
                tab.addEventListener("click", function() {
                    // Tabs deaktivieren
                    document.querySelectorAll(".tab").forEach(t => t.classList.remove("active"));
                    document.querySelectorAll(".tab-content").forEach(c => c.classList.remove("active"));
                    
                    // Aktuellen Tab aktivieren
                    this.classList.add("active");
                    const tabId = this.getAttribute("data-tab");
                    document.getElementById(tabId).classList.add("active");
                });
            });
            
            // Schwierigkeitsgrad-Buttons
            document.querySelectorAll(".difficulty-btn").forEach(btn => {
                btn.addEventListener("click", function() {
                    document.querySelectorAll(".difficulty-btn").forEach(b => b.classList.remove("active"));
                    this.classList.add("active");
                    currentDifficulty = this.getAttribute("data-difficulty");
                    generateNewTask();
                });
            });
            
            // Aufgabentyp-Buttons
            document.querySelectorAll(".tasktype-btn").forEach(btn => {
                btn.addEventListener("click", function() {
                    document.querySelectorAll(".tasktype-btn").forEach(b => b.classList.remove("active"));
                    this.classList.add("active");
                    currentTaskType = this.getAttribute("data-type");
                    generateNewTask();
                });
            });
            
            // Enter-Taste zum Prüfen der Antwort
            document.getElementById("userAnswer").addEventListener("keypress", function(event) {
                if (event.key === "Enter") {
                    checkAnswer();
                }
            });
            
            // Erste Aufgabe generieren
            generateNewTask();
        });
        
        // Zufallszahl zwischen min und max (inklusive)
        function randomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        
        // Zufallszahl mit einer Dezimalstelle
        function randomFloat(min, max, decimals = 1) {
            const factor = Math.pow(10, decimals);
            return Math.round((Math.random() * (max - min) + min) * factor) / factor;
        }
        
        // Generiert eine neue Aufgabe
        function generateNewTask() {
            // Reset UI
            document.getElementById("resultMessage").style.display = "none";
            document.getElementById("solution").style.display = "none";
            document.getElementById("userAnswer").value = "";
            document.getElementById("graphContainer").classList.add("hidden");
            graphVisible = false;
            
            // Parameter basierend auf Schwierigkeitsgrad und Aufgabentyp
            let params = {};
            
            if (currentTaskType === "line-parabola") {
                // Gerade mit Parabel
                params = generateLineParabolaTask(currentDifficulty);
                
                // Funktionsgleichungen anzeigen
                document.getElementById("equation1").innerHTML = `<span class="gerade">g(x) = ${formatCoefficient(params.m)}x ${formatConstant(params.t)}</span>`;
                document.getElementById("equation2").innerHTML = `<span class="parabel">f(x) = ${formatCoefficient(params.a)}x<sup>2</sup> ${formatCoefficient(params.b)}x ${formatConstant(params.c)}</span>`;
                
                // Aufgabentext
                document.getElementById("taskText").innerHTML = `Berechne die Schnittpunkte der Geraden g mit der Parabel f.`;
                
            } else {
                // Parabel mit Parabel
                params = generateParabolaParabolaTask(currentDifficulty);
                
                // Funktionsgleichungen anzeigen
                document.getElementById("equation1").innerHTML = `<span class="parabel">f(x) = ${formatCoefficient(params.a1)}x<sup>2</sup> ${formatCoefficient(params.b1)}x ${formatConstant(params.c1)}</span>`;
                document.getElementById("equation2").innerHTML = `<span class="parabel">g(x) = ${formatCoefficient(params.a2)}x<sup>2</sup> ${formatCoefficient(params.b2)}x ${formatConstant(params.c2)}</span>`;
                
                // Aufgabentext
                document.getElementById("taskText").innerHTML = `Berechne die Schnittpunkte der Parabeln f und g.`;
            }
            
            // Aufgabe speichern
            currentTask = params;
        }
        
        // Formatiert einen Koeffizienten für die Anzeige
        function formatCoefficient(value) {
            if (value === 0) return "";
            if (value === 1) return "+ ";
            if (value === -1) return "- ";
            if (value > 0) return `+ ${value} `;
            return `- ${Math.abs(value)} `;
        }
        
        // Formatiert eine Konstante für die Anzeige
        function formatConstant(value) {
            if (value === 0) return "";
            if (value > 0) return `+ ${value}`;
            return `- ${Math.abs(value)}`;
        }
        
        // Generiert eine Aufgabe mit einer Geraden und einer Parabel
        function generateLineParabolaTask(difficulty) {
            let a, b, c, m, t;
            let intersectionCount;
            
            // Sicherstellen, dass die Aufgabe eine oder zwei Lösungen hat
            do {
                switch(difficulty) {
                    case "leicht":
                        // Einfache ganze Zahlen, garantierte Lösungen
                        a = randomInt(1, 2);
                        m = randomInt(-3, 3);
                        t = randomInt(-5, 5);
                        
                        // b und c so wählen, dass die Lösungen einfach sind
                        const x1 = randomInt(-3, 3);
                        const x2 = randomInt(-3, 3);
                        
                        // Berechne b und c aus x1 und x2
                        b = -(x1 + x2) * a;
                        c = x1 * x2 * a;
                        
                        // t anpassen, damit die Schnittpunkte stimmen
                        t = a * x1 * x1 + b * x1;
                        
                        break;
                        
                    case "mittel":
                        // Komplexere Zahlen
                        a = randomFloat(-3, 3, 1);
                        b = randomFloat(-5, 5, 1);
                        c = randomFloat(-5, 5, 1);
                        m = randomFloat(-3, 3, 1);
                        t = randomFloat(-5, 5, 1);
                        break;
                        
                    case "schwer":
                        // Anspruchsvolle Zahlen
                        a = randomFloat(-4, 4, 1);
                        b = randomFloat(-8, 8, 1);
                        c = randomFloat(-10, 10, 1);
                        m = randomFloat(-5, 5, 1);
                        t = randomFloat(-10, 10, 1);
                        break;
                }
                
                // Prüfen, ob Gleichungssystem lösbar ist und wie viele Lösungen
                const discriminant = Math.pow(b - m, 2) - 4 * a * (c - t);
                
                if (discriminant >= 0) {
                    // Berechne die Schnittpunkte
                    const x1 = (-1 * (b - m) + Math.sqrt(discriminant)) / (2 * a);
                    const y1 = m * x1 + t;
                    
                    let x2, y2;
                    if (discriminant > 0) {
                        x2 = (-1 * (b - m) - Math.sqrt(discriminant)) / (2 * a);
                        y2 = m * x2 + t;
                        intersectionCount = 2;
                    } else {
                        intersectionCount = 1;
                    }
                    
                    // Berechne die Schnittpunkte
                    const points = [];
                    points.push({ x: roundTo(x1, 4), y: roundTo(y1, 4) });
                    
                    if (intersectionCount === 2) {
                        points.push({ x: roundTo(x2, 4), y: roundTo(y2, 4) });
                    }
                    
                    // Runden der Werte für einfachere Überprüfung
                    return {
                        type: "line-parabola",
                        a: Number(a.toFixed(1)),
                        b: Number(b.toFixed(1)),
                        c: Number(c.toFixed(1)),
                        m: Number(m.toFixed(1)),
                        t: Number(t.toFixed(1)),
                        points: points,
                        intersectionCount: intersectionCount
                    };
                }
            } while (true);
        }
        
        // Generiert eine Aufgabe mit zwei Parabeln
        function generateParabolaParabolaTask(difficulty) {
            let a1, b1, c1, a2, b2, c2;
            let intersectionCount;
            
            // Sicherstellen, dass die Aufgabe eine oder zwei Lösungen hat
            do {
                switch(difficulty) {
                    case "leicht":
                        // Einfache ganze Zahlen, garantierte Lösungen
                        a1 = randomInt(1, 2);
                        a2 = randomInt(-2, 0);
                        
                        // Einfache Schnittpunkte generieren
                        const x1 = randomInt(-3, 3);
                        const x2 = randomInt(-3, 3);
                        
                        // Gemeinsamen y-Wert für einen Schnittpunkt wählen
                        const y1 = randomInt(-5, 5);
                        
                        // Berechne b1 und c1 so, dass die Parabel durch den Punkt (x1, y1) geht
                        b1 = (y1 - a1 * x1 * x1) / x1;
                        c1 = y1 - a1 * x1 * x1 - b1 * x1;
                        
                        // Berechne b2 und c2 so, dass die zweite Parabel durch den Punkt (x1, y1) geht
                        b2 = (y1 - a2 * x1 * x1) / x1;
                        c2 = y1 - a2 * x1 * x1 - b2 * x1;
                        
                        break;
                        
                    case "mittel":
                        // Komplexere Zahlen
                        a1 = randomFloat(1, 3, 1);
                        b1 = randomFloat(-4, 4, 1);
                        c1 = randomFloat(-5, 5, 1);
                        a2 = randomFloat(-3, 0, 1);
                        b2 = randomFloat(-4, 4, 1);
                        c2 = randomFloat(-5, 5, 1);
                        break;
                        
                    case "schwer":
                        // Anspruchsvolle Zahlen mit möglichen Randfällen
                        a1 = randomFloat(-4, 4, 1);
                        b1 = randomFloat(-5, 5, 1);
                        c1 = randomFloat(-8, 8, 1);
                        a2 = randomFloat(-4, 4, 1);
                        b2 = randomFloat(-5, 5, 1);
                        c2 = randomFloat(-8, 8, 1);
                        
                        // Sicherstellen, dass a1 != a2, damit wir nicht unendlich viele Lösungen haben
                        if (Math.abs(a1 - a2) < 0.1) {
                            a2 += (a1 > 0) ? -1 : 1;
                        }
                        break;
                }
                
                // Berechne a', b', c' für die quadratische Gleichung
                const a_diff = a1 - a2;
                const b_diff = b1 - b2;
                const c_diff = c1 - c2;
                
                // Prüfen, ob Gleichungssystem lösbar ist
                if (Math.abs(a_diff) < 0.001) {
                    // Wenn a1 ≈ a2, dann ist es eine lineare Gleichung
                    if (Math.abs(b_diff) > 0.001) {
                        // Eine Lösung: Lineare Gleichung
                        const x = -c_diff / b_diff;
                        const y = a1 * x * x + b1 * x + c1;
                        
                        return {
                            type: "parabola-parabola",
                            a1: Number(a1.toFixed(1)),
                            b1: Number(b1.toFixed(1)),
                            c1: Number(c1.toFixed(1)),
                            a2: Number(a2.toFixed(1)),
                            b2: Number(b2.toFixed(1)),
                            c2: Number(c2.toFixed(1)),
                            points: [{ x: roundTo(x, 4), y: roundTo(y, 4) }],
                            intersectionCount: 1
                        };
                    }
                    // Wenn a1 ≈ a2 und b1 ≈ b2, aber c1 != c2, dann keine Schnittpunkte
                    // Wenn a1 ≈ a2 und b1 ≈ b2 und c1 ≈ c2, dann identische Parabeln
                    continue;
                } else {
                    // Quadratische Gleichung: a_diff * x^2 + b_diff * x + c_diff = 0
                    const discriminant = b_diff * b_diff - 4 * a_diff * c_diff;
                    
                    if (discriminant >= 0) {
                        // Berechne die Schnittpunkte
                        const x1 = (-b_diff + Math.sqrt(discriminant)) / (2 * a_diff);
                        const y1 = a1 * x1 * x1 + b1 * x1 + c1;
                        
                        let x2, y2;
                        if (discriminant > 0) {
                            x2 = (-b_diff - Math.sqrt(discriminant)) / (2 * a_diff);
                            y2 = a1 * x2 * x2 + b1 * x2 + c1;
                            intersectionCount = 2;
                        } else {
                            intersectionCount = 1;
                        }
                        
                        // Berechne die Schnittpunkte
                        const points = [];
                        points.push({ x: roundTo(x1, 4), y: roundTo(y1, 4) });
                        
                        if (intersectionCount === 2) {
                            points.push({ x: roundTo(x2, 4), y: roundTo(y2, 4) });
                        }
                        
                        // Runden der Werte für einfachere Überprüfung
                        return {
                            type: "parabola-parabola",
                            a1: Number(a1.toFixed(1)),
                            b1: Number(b1.toFixed(1)),
                            c1: Number(c1.toFixed(1)),
                            a2: Number(a2.toFixed(1)),
                            b2: Number(b2.toFixed(1)),
                            c2: Number(c2.toFixed(1)),
                            points: points,
                            intersectionCount: intersectionCount
                        };
                    }
                }
            } while (true);
        }
        
        // Rundet eine Zahl auf eine bestimmte Anzahl von Dezimalstellen
        function roundTo(value, decimals) {
            const factor = Math.pow(10, decimals);
            return Math.round(value * factor) / factor;
        }
        
        // Überprüft die Antwort des Nutzers
        function checkAnswer() {
            const userAnswer = document.getElementById("userAnswer").value.trim();
            const resultMessage = document.getElementById("resultMessage");
            
            if (!userAnswer) {
                resultMessage.style.display = "block";
                resultMessage.className = "result incorrect";
                resultMessage.textContent = "Bitte gib eine Antwort ein.";
                return;
            }
            
// Extrahiere alle Punkte aus der Antwort
    // Format: (x|y) oder (x₁|y₁), (x₂|y₂)
    const pointRegex = /\(\s*([-+]?\d*\.?\d+)\s*\|\s*([-+]?\d*\.?\d+)\s*\)/g;
    const userPoints = [];
    let match;
    
    while ((match = pointRegex.exec(userAnswer)) !== null) {
        userPoints.push({
            x: parseFloat(match[1]),
            y: parseFloat(match[2])
        });
    }
    
    // Überprüfe, ob die Anzahl der angegebenen Punkte korrekt ist
    if (userPoints.length !== currentTask.intersectionCount) {
        resultMessage.style.display = "block";
        resultMessage.className = "result incorrect";
        resultMessage.innerHTML = `Falsch! Du hast ${userPoints.length} Schnittpunkt(e) angegeben, aber es gibt ${currentTask.intersectionCount}.`;
        return;
    }
    
    // Vergleiche die Punkte mit den erwarteten Lösungen
    let allCorrect = true;
    const tolerance = 0.1; // Toleranz für Rundungsfehler
    
    // Für jeden erwarteten Punkt prüfen, ob ein passender Benutzerpunkt existiert
    for (const expectedPoint of currentTask.points) {
        let foundMatch = false;
        
        for (const userPoint of userPoints) {
            // Prüfe, ob die Koordinaten innerhalb der Toleranz übereinstimmen
            if (Math.abs(userPoint.x - expectedPoint.x) <= tolerance && 
                Math.abs(userPoint.y - expectedPoint.y) <= tolerance) {
                foundMatch = true;
                break;
            }
        }
        
        if (!foundMatch) {
            allCorrect = false;
            break;
        }
    }
    
    // Ergebnis anzeigen
    resultMessage.style.display = "block";
    if (allCorrect) {
        resultMessage.className = "result correct";
        resultMessage.textContent = "Richtig! Deine Lösung ist korrekt.";
    } else {
        resultMessage.className = "result incorrect";
        resultMessage.textContent = "Leider falsch. Überprüfe deine Berechnung oder zeige die Lösung an.";
    }
}

// Zeigt die Lösung an
function showSolution() {
    const solution = document.getElementById("solution");
    solution.style.display = "block";
    
    let solutionHTML = "<h3>Lösung</h3>";
    
    if (currentTask.type === "line-parabola") {
        // Lösung für Gerade und Parabel
        const { a, b, c, m, t } = currentTask;
        
        solutionHTML += "<div class='step'><span class='step-number'>1.</span> Gleichsetzen:</div>";
        solutionHTML += `<div class="equation-display">m·x + t = a·x<sup>2</sup> + b·x + c</div>`;
        solutionHTML += `<div class="equation-display">${m}·x ${formatConstant(t)} = ${a}·x<sup>2</sup> ${formatCoefficient(b)}x ${formatConstant(c)}</div>`;
        
        solutionHTML += "<div class='step'><span class='step-number'>2.</span> Umformen zur Normalform:</div>";
        solutionHTML += `<div class="equation-display">${a}·x<sup>2</sup> ${formatCoefficient(b-m)}x ${formatConstant(c-t)} = 0</div>`;
        
        // Koeffizienten für die quadratische Gleichung
        const A = a;
        const B = b - m;
        const C = c - t;
        
        solutionHTML += "<div class='step'><span class='step-number'>3.</span> Berechnung der Diskriminante:</div>";
        solutionHTML += `<div class="equation-display">D = B<sup>2</sup> - 4·A·C = ${B}<sup>2</sup> - 4·${A}·${C} = ${B*B - 4*A*C}</div>`;
        
        const discriminant = B*B - 4*A*C;
        
        if (discriminant > 0) {
            // Zwei Lösungen
            solutionHTML += "<div class='step'><span class='step-number'>4.</span> Berechnung der x-Werte mit der Mitternachtsformel:</div>";
            solutionHTML += `<div class="equation-display">x<sub>1,2</sub> = (-B ± √D) / (2·A) = (-${B} ± √${discriminant}) / (2·${A})</div>`;
            
            const x1 = (-B + Math.sqrt(discriminant)) / (2*A);
            const x2 = (-B - Math.sqrt(discriminant)) / (2*A);
            
            solutionHTML += `<div class="equation-display">x<sub>1</sub> = ${roundTo(x1, 3)}, x<sub>2</sub> = ${roundTo(x2, 3)}</div>`;
            
            solutionHTML += "<div class='step'><span class='step-number'>5.</span> Berechnung der y-Werte durch Einsetzen in die Gerade:</div>";
            
            const y1 = m * x1 + t;
            const y2 = m * x2 + t;
            
            solutionHTML += `<div class="equation-display">y<sub>1</sub> = m·x<sub>1</sub> + t = ${m}·${roundTo(x1, 3)} ${formatConstant(t)} = ${roundTo(y1, 3)}</div>`;
            solutionHTML += `<div class="equation-display">y<sub>2</sub> = m·x<sub>2</sub> + t = ${m}·${roundTo(x2, 3)} ${formatConstant(t)} = ${roundTo(y2, 3)}</div>`;
            
            solutionHTML += "<div class='step'><span class='step-number'>6.</span> Die Schnittpunkte sind:</div>";
            solutionHTML += `<div class="equation-display">S<sub>1</sub> = <span class="coordinate">(${roundTo(x1, 3)}|${roundTo(y1, 3)})</span>, S<sub>2</sub> = <span class="coordinate">(${roundTo(x2, 3)}|${roundTo(y2, 3)})</span></div>`;
            
        } else if (discriminant === 0) {
            // Eine Lösung (Berührpunkt)
            solutionHTML += "<div class='step'><span class='step-number'>4.</span> Berechnung des x-Wertes mit der Mitternachtsformel (Diskriminante = 0, also nur eine Lösung):</div>";
            solutionHTML += `<div class="equation-display">x = -B / (2·A) = -${B} / (2·${A})</div>`;
            
            const x = -B / (2*A);
            const y = m * x + t;
            
            solutionHTML += `<div class="equation-display">x = ${roundTo(x, 3)}</div>`;
            
            solutionHTML += "<div class='step'><span class='step-number'>5.</span> Berechnung des y-Wertes durch Einsetzen in die Gerade:</div>";
            solutionHTML += `<div class="equation-display">y = m·x + t = ${m}·${roundTo(x, 3)} ${formatConstant(t)} = ${roundTo(y, 3)}</div>`;
            
            solutionHTML += "<div class='step'><span class='step-number'>6.</span> Der Schnittpunkt (Berührpunkt) ist:</div>";
            solutionHTML += `<div class="equation-display">S = <span class="coordinate">(${roundTo(x, 3)}|${roundTo(y, 3)})</span></div>`;
            
        } else {
            // Keine Lösung
            solutionHTML += "<div class='step'><span class='step-number'>4.</span> Da die Diskriminante negativ ist, gibt es keine reellen Schnittpunkte.</div>";
        }
        
    } else {
        // Lösung für zwei Parabeln
        const { a1, b1, c1, a2, b2, c2 } = currentTask;
        
        solutionHTML += "<div class='step'><span class='step-number'>1.</span> Gleichsetzen beider Parabeln:</div>";
        solutionHTML += `<div class="equation-display">a₁·x<sup>2</sup> + b₁·x + c₁ = a₂·x<sup>2</sup> + b₂·x + c₂</div>`;
        solutionHTML += `<div class="equation-display">${a1}·x<sup>2</sup> ${formatCoefficient(b1)}x ${formatConstant(c1)} = ${a2}·x<sup>2</sup> ${formatCoefficient(b2)}x ${formatConstant(c2)}</div>`;
        
        solutionHTML += "<div class='step'><span class='step-number'>2.</span> Umformen zur Normalform:</div>";
        
        const A = a1 - a2;
        const B = b1 - b2;
        const C = c1 - c2;
        
        solutionHTML += `<div class="equation-display">(a₁-a₂)·x<sup>2</sup> + (b₁-b₂)·x + (c₁-c₂) = 0</div>`;
        solutionHTML += `<div class="equation-display">${A}·x<sup>2</sup> ${formatCoefficient(B)}x ${formatConstant(C)} = 0</div>`;
        
        if (Math.abs(A) < 0.001) {
            // A ≈ 0, lineare Gleichung oder identische Parabeln
            if (Math.abs(B) < 0.001) {
                // B ≈ 0 auch, also konstante Gleichung
                if (Math.abs(C) < 0.001) {
                    // C ≈ 0 auch, identische Parabeln
                    solutionHTML += "<div class='step'><span class='step-number'>3.</span> Da (a₁-a₂) ≈ 0, (b₁-b₂) ≈ 0 und (c₁-c₂) ≈ 0, sind die Parabeln identisch. Es gibt unendlich viele Schnittpunkte.</div>";
                } else {
                    // Nur C != 0, keine Lösung
                    solutionHTML += "<div class='step'><span class='step-number'>3.</span> Da (a₁-a₂) ≈ 0, (b₁-b₂) ≈ 0, aber (c₁-c₂) ≠ 0, gibt es keine Schnittpunkte.</div>";
                }
            } else {
                // Lineare Gleichung (eine Lösung)
                solutionHTML += "<div class='step'><span class='step-number'>3.</span> Da (a₁-a₂) ≈ 0, aber (b₁-b₂) ≠ 0, haben wir eine lineare Gleichung:</div>";
                solutionHTML += `<div class="equation-display">${B}·x ${formatConstant(C)} = 0</div>`;
                
                const x = -C / B;
                const y = a1 * x * x + b1 * x + c1;
                
                solutionHTML += "<div class='step'><span class='step-number'>4.</span> Lösen der linearen Gleichung:</div>";
                solutionHTML += `<div class="equation-display">x = -${C} / ${B} = ${roundTo(x, 3)}</div>`;
                
                solutionHTML += "<div class='step'><span class='step-number'>5.</span> Berechnung des y-Wertes durch Einsetzen in die erste Parabel:</div>";
                solutionHTML += `<div class="equation-display">y = a₁·x<sup>2</sup> + b₁·x + c₁ = ${a1}·${roundTo(x, 3)}<sup>2</sup> ${formatCoefficient(b1)}${roundTo(x, 3)} ${formatConstant(c1)} = ${roundTo(y, 3)}</div>`;
                
                solutionHTML += "<div class='step'><span class='step-number'>6.</span> Der Schnittpunkt ist:</div>";
                solutionHTML += `<div class="equation-display">S = <span class="coordinate">(${roundTo(x, 3)}|${roundTo(y, 3)})</span></div>`;
            }
        } else {
            // Quadratische Gleichung
            solutionHTML += "<div class='step'><span class='step-number'>3.</span> Berechnung der Diskriminante:</div>";
            solutionHTML += `<div class="equation-display">D = B<sup>2</sup> - 4·A·C = ${B}<sup>2</sup> - 4·${A}·${C} = ${B*B - 4*A*C}</div>`;
            
            const discriminant = B*B - 4*A*C;
            
            if (discriminant > 0) {
                // Zwei Lösungen
                solutionHTML += "<div class='step'><span class='step-number'>4.</span> Berechnung der x-Werte mit der Mitternachtsformel:</div>";
                solutionHTML += `<div class="equation-display">x<sub>1,2</sub> = (-B ± √D) / (2·A) = (-${B} ± √${discriminant}) / (2·${A})</div>`;
                
                const x1 = (-B + Math.sqrt(discriminant)) / (2*A);
                const x2 = (-B - Math.sqrt(discriminant)) / (2*A);
                
                solutionHTML += `<div class="equation-display">x<sub>1</sub> = ${roundTo(x1, 3)}, x<sub>2</sub> = ${roundTo(x2, 3)}</div>`;
                
                solutionHTML += "<div class='step'><span class='step-number'>5.</span> Berechnung der y-Werte durch Einsetzen in die erste Parabel:</div>";
                
                const y1 = a1 * x1 * x1 + b1 * x1 + c1;
                const y2 = a1 * x2 * x2 + b1 * x2 + c1;
                
                solutionHTML += `<div class="equation-display">y<sub>1</sub> = a₁·x<sub>1</sub><sup>2</sup> + b₁·x<sub>1</sub> + c₁ = ${a1}·${roundTo(x1, 3)}<sup>2</sup> ${formatCoefficient(b1)}${roundTo(x1, 3)} ${formatConstant(c1)} = ${roundTo(y1, 3)}</div>`;
                solutionHTML += `<div class="equation-display">y<sub>2</sub> = a₁·x<sub>2</sub><sup>2</sup> + b₁·x<sub>2</sub> + c₁ = ${a1}·${roundTo(x2, 3)}<sup>2</sup> ${formatCoefficient(b1)}${roundTo(x2, 3)} ${formatConstant(c1)} = ${roundTo(y2, 3)}</div>`;
                
                solutionHTML += "<div class='step'><span class='step-number'>6.</span> Die Schnittpunkte sind:</div>";
                solutionHTML += `<div class="equation-display">S<sub>1</sub> = <span class="coordinate">(${roundTo(x1, 3)}|${roundTo(y1, 3)})</span>, S<sub>2</sub> = <span class="coordinate">(${roundTo(x2, 3)}|${roundTo(y2, 3)})</span></div>`;
                
            } else if (discriminant === 0) {
                // Eine Lösung (Berührpunkt)
                solutionHTML += "<div class='step'><span class='step-number'>4.</span> Berechnung des x-Wertes mit der Mitternachtsformel (Diskriminante = 0, also nur eine Lösung):</div>";
                solutionHTML += `<div class="equation-display">x = -B / (2·A) = -${B} / (2·${A})</div>`;
                
                const x = -B / (2*A);
                const y = a1 * x * x + b1 * x + c1;
                
                solutionHTML += `<div class="equation-display">x = ${roundTo(x, 3)}</div>`;
                
                solutionHTML += "<div class='step'><span class='step-number'>5.</span> Berechnung des y-Wertes durch Einsetzen in die erste Parabel:</div>";
                solutionHTML += `<div class="equation-display">y = a₁·x<sup>2</sup> + b₁·x + c₁ = ${a1}·${roundTo(x, 3)}<sup>2</sup> ${formatCoefficient(b1)}${roundTo(x, 3)} ${formatConstant(c1)} = ${roundTo(y, 3)}</div>`;
                
                solutionHTML += "<div class='step'><span class='step-number'>6.</span> Der Schnittpunkt (Berührpunkt) ist:</div>";
                solutionHTML += `<div class="equation-display">S = <span class="coordinate">(${roundTo(x, 3)}|${roundTo(y, 3)})</span></div>`;
                
            } else {
                // Keine Lösung
                solutionHTML += "<div class='step'><span class='step-number'>4.</span> Da die Diskriminante negativ ist, gibt es keine reellen Schnittpunkte.</div>";
            }
        }
    }
    
    solution.innerHTML = solutionHTML;
    
    // Graph bei Lösung anzeigen
    if (!graphVisible) {
        toggleGraph();
    }
}

// Zeigt oder versteckt den Graphen
function toggleGraph() {
    const graphContainer = document.getElementById("graphContainer");
    
    if (graphVisible) {
        graphContainer.classList.add("hidden");
        graphVisible = false;
        document.getElementById("showGraphBtn").textContent = "Graph anzeigen";
    } else {
        graphContainer.classList.remove("hidden");
        graphVisible = true;
        document.getElementById("showGraphBtn").textContent = "Graph ausblenden";
        drawGraph();
    }
}

// Zeichnet den Graphen
function drawGraph() {
    const graphDiv = document.getElementById("graph");
    
    // Bestimme den x-Bereich basierend auf den Schnittpunkten
    let minX = -5;
    let maxX = 5;
    
    if (currentTask.points && currentTask.points.length > 0) {
        for (const point of currentTask.points) {
            minX = Math.min(minX, point.x - 2);
            maxX = Math.max(maxX, point.x + 2);
        }
    }
    
    // Generiere x-Werte für den Plot
    const xValues = [];
    const step = (maxX - minX) / 100;
    for (let x = minX; x <= maxX; x += step) {
        xValues.push(x);
    }
    
    let traces = [];
    
    if (currentTask.type === "line-parabola") {
        // Gerade
        const { m, t } = currentTask;
        const yValuesLine = xValues.map(x => m * x + t);
        
        traces.push({
            x: xValues,
            y: yValuesLine,
            type: 'scatter',
            mode: 'lines',
            name: 'Gerade g',
            line: {
                color: '#4285F4',
                width: 2
            }
        });
        
        // Parabel
        const { a, b, c } = currentTask;
        const yValuesParabola = xValues.map(x => a * x * x + b * x + c);
        
        traces.push({
            x: xValues,
            y: yValuesParabola,
            type: 'scatter',
            mode: 'lines',
            name: 'Parabel f',
            line: {
                color: '#EA4335',
                width: 2
            }
        });
        
    } else {
        // Erste Parabel
        const { a1, b1, c1 } = currentTask;
        const yValuesParabola1 = xValues.map(x => a1 * x * x + b1 * x + c1);
        
        traces.push({
            x: xValues,
            y: yValuesParabola1,
            type: 'scatter',
            mode: 'lines',
            name: 'Parabel f',
            line: {
                color: '#4285F4',
                width: 2
            }
        });
        
        // Zweite Parabel
        const { a2, b2, c2 } = currentTask;
        const yValuesParabola2 = xValues.map(x => a2 * x * x + b2 * x + c2);
        
        traces.push({
            x: xValues,
            y: yValuesParabola2,
            type: 'scatter',
            mode: 'lines',
            name: 'Parabel g',
            line: {
                color: '#EA4335',
                width: 2
            }
        });
    }
    
    // Schnittpunkte
    if (currentTask.points && currentTask.points.length > 0) {
        const xPoints = currentTask.points.map(p => p.x);
        const yPoints = currentTask.points.map(p => p.y);
        
        traces.push({
            x: xPoints,
            y: yPoints,
            type: 'scatter',
            mode: 'markers',
            name: 'Schnittpunkte',
            marker: {
                color: '#34A853',
                size: 8
            }
        });
    }
    
    const layout = {
        title: 'Funktionen und Schnittpunkte',
        xaxis: {
            title: 'x',
            zeroline: true,
            gridcolor: '#ddd',
            zerolinecolor: '#333',
            range: [minX, maxX]
        },
        yaxis: {
            title: 'y',
            zeroline: true,
            gridcolor: '#ddd',
            zerolinecolor: '#333'
        },
        legend: {
            x: 0,
            y: 1,
            orientation: 'h'
        },
        margin: {
            l: 40,
            r: 40,
            t: 50,
            b: 40
        }
    };
    
    Plotly.newPlot(graphDiv, traces, layout);
}
